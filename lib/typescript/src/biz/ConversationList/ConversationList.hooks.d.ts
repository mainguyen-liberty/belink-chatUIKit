import * as React from 'react';
import { ConversationModel } from '../../chat';
import type { AlertRef } from '../../ui/Alert';
import type { FlatListRef } from '../../ui/FlatList';
import type { BottomSheetNameMenuRef } from '../BottomSheetMenu';
import type { ListStateType } from '../types';
import type { ConversationListItemComponentType, ConversationListItemProps, ConversationListProps } from './types';
export declare function useConversationList(props: ConversationListProps): {
    propsFlatListProps: Omit<import("../../ui/FlatList").FlatListProps<ConversationListItemProps>, "ref" | "data" | "renderItem"> | undefined;
    listType: "FlatList" | "SectionList";
    listState: ListStateType;
    data: readonly ConversationListItemProps[];
    onRemove: (convId: string) => void;
    onPin: (conv: ConversationModel) => Promise<void>;
    onDisturb: (conv: ConversationModel) => Promise<void>;
    onRead: (conv: ConversationModel) => void;
    onRequestCloseMenu: (onFinished?: (() => void) | undefined) => void;
    menuRef: React.RefObject<BottomSheetNameMenuRef>;
    alertRef: React.RefObject<AlertRef>;
    avatarUrl: string | undefined;
    tr: (key: string, ...args: any[]) => string;
    onShowConversationListMoreActions: () => void;
    ListItemRender: ConversationListItemComponentType;
    dataRef: React.MutableRefObject<ConversationListItemProps[]>;
    setData: React.Dispatch<React.SetStateAction<readonly ConversationListItemProps[]>>;
    ListItem: React.FunctionComponent<ConversationListItemProps>;
    ref: React.MutableRefObject<FlatListRef<ConversationListItemProps>>;
    setListState: React.Dispatch<React.SetStateAction<ListStateType>>;
    onRefresh: (() => void) | undefined;
    onMore: (() => void) | undefined;
    isAutoLoad: boolean;
    isSort: boolean;
    isLoadAll: boolean;
    isShowAfterLoaded: boolean;
    loadType: "multiple" | "once";
    isVisibleUpdate: boolean;
    isAutoUpdate: boolean;
    isEventUpdate: boolean;
    refreshing: boolean | undefined;
    viewabilityConfig: import("react-native/types").ViewabilityConfig | undefined;
    onViewableItemsChanged: ((info: {
        viewableItems: import("react-native/types").ViewToken[];
        changed: import("react-native/types").ViewToken[];
    }) => void) | undefined;
    deferSearch: (keyword: string) => void;
    setOnSearch: (onSearch: (keyword: string) => void) => void;
};
export declare const sortConversations: (prevProps: ConversationListItemProps, nextProps: ConversationListItemProps) => number;
//# sourceMappingURL=ConversationList.hooks.d.ts.map