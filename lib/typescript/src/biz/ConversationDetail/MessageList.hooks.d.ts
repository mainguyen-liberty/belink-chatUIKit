import * as React from 'react';
import type { LayoutChangeEvent, ListRenderItemInfo, NativeScrollEvent, NativeSyntheticEvent } from 'react-native';
import type { AlertRef } from '../../ui/Alert';
import type { BottomSheetNameMenuRef } from '../BottomSheetMenu';
import type { ReportItemModel } from '../MessageReport';
import type { MessageListItemComponentType, MessageListItemProps, MessageListItemRenders, MessageListProps, MessageListRef, MessageModel, SystemMessageModel, TimeMessageModel } from './types';
export declare function useMessageList(props: MessageListProps, ref?: React.ForwardedRef<MessageListRef>): {
    listType: "FlatList" | "SectionList";
    listState: import("../types").ListStateType;
    onRequestCloseMenu: (onFinished?: (() => void) | undefined) => void;
    menuRef: React.RefObject<BottomSheetNameMenuRef>;
    alertRef: React.RefObject<AlertRef>;
    onClickedItem: (id: string, model: SystemMessageModel | TimeMessageModel | MessageModel) => void;
    onLongPressItem: (id: string, model: SystemMessageModel | TimeMessageModel | MessageModel) => void;
    inverted: boolean;
    maxListHeight: number;
    setMaxListHeight: React.Dispatch<React.SetStateAction<number>>;
    reachedThreshold: number;
    onMore: () => void;
    reportMessage: (result?: ReportItemModel) => void;
    showReportMessage: (model: MessageModel) => void;
    reportData: ReportItemModel[];
    reportRef: React.RefObject<import("../..").ModalRef>;
    onClickedItemAvatar: (id: string, model: SystemMessageModel | TimeMessageModel | MessageModel) => void;
    onClickedItemQuote: (id: string, model: SystemMessageModel | TimeMessageModel | MessageModel) => void;
    onClickedItemState: (_id: string, model: SystemMessageModel | TimeMessageModel | MessageModel) => void;
    ListItemRender: MessageListItemComponentType;
    listItemRenderProps: MessageListItemRenders;
    scrollEventThrottle: number;
    onMomentumScrollEnd: () => void;
    onScrollEndDrag: (_event: NativeSyntheticEvent<NativeScrollEvent>) => void;
    onScrollBeginDrag: (_event: NativeSyntheticEvent<NativeScrollEvent>) => void;
    onScroll: (event: NativeSyntheticEvent<NativeScrollEvent>) => void;
    onLayout: (event: LayoutChangeEvent) => void;
    bounces: boolean;
    enableListItemUserInfoUpdateFromMessage: boolean;
    onContentSizeChange: (_w: number, _h: number) => void;
    onRenderItem: (info: ListRenderItemInfo<MessageListItemProps>) => void;
    dataRef: React.MutableRefObject<MessageListItemProps[]>;
    data: readonly MessageListItemProps[];
    setData: React.Dispatch<React.SetStateAction<readonly MessageListItemProps[]>>;
    ListItem: React.FunctionComponent<MessageListItemProps>;
    ref: React.MutableRefObject<import("../..").FlatListRef<MessageListItemProps>>;
    setListState: React.Dispatch<React.SetStateAction<import("../types").ListStateType>>;
    onRefresh: (() => void) | undefined;
    isAutoLoad: boolean;
    isSort: boolean;
    isLoadAll: boolean;
    isShowAfterLoaded: boolean;
    loadType: "multiple" | "once";
    isVisibleUpdate: boolean;
    isAutoUpdate: boolean;
    isEventUpdate: boolean;
    refreshing: boolean | undefined;
    viewabilityConfig: import("react-native").ViewabilityConfig | undefined;
    onViewableItemsChanged: ((info: {
        viewableItems: import("react-native").ViewToken[];
        changed: import("react-native").ViewToken[];
    }) => void) | undefined;
    deferSearch: (keyword: string) => void;
    setOnSearch: (onSearch: (keyword: string) => void) => void;
};
//# sourceMappingURL=MessageList.hooks.d.ts.map